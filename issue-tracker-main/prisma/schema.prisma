// ====================================================================
// Prisma Schema: ادغام سیستم ورک‌اسپیس و تخصیص چندگانه
// نسخه نهایی و کامل
// ====================================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // relationMode = "prisma" // طبق درخواست شما حذف شد
}

// ========== Enums: تعریف نقش‌ها و سطوح دسترسی ==========

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
  VIEWER
}

enum PermissionLevel {
  VIEW
  EDIT
  MANAGE
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum ResponseStatus {
  NONE
  ACCEPTABLE
  UNACCEPTABLE
}

// ========== مدل‌های اصلی سیستم ==========

model User {
  id                      String                        @id @default(cuid())
  name                    String?
  email                   String?                       @unique
  emailVerified           DateTime?
  image                   String?
  
  accounts                Account[]
  sessions                Session[]
  
  memberships             WorkspaceMember[]
  teamMemberships         TeamMember[]
  
  // تخصیص‌ها به این کاربر
  issueAssignments        IssueAssignee[]
  checklistAssignments    ChecklistAssignmentAssignee[]
  
  createdTemplates        ChecklistTemplate[]           @relation("CreatedTemplates")
  createdIssues           Issue[]                       @relation("CreatedIssues")
}

model Workspace {
  id                 Int                   @id @default(autoincrement())
  name               String                @db.VarChar(255)
  description        String?               @db.Text
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  
  members            WorkspaceMember[]
  teams              Team[]
  
  checklistTemplates ChecklistTemplate[]
  issues             Issue[]
  projects           Project[]
}

model Team {
  id                      Int                               @id @default(autoincrement())
  name                    String                            @db.VarChar(255)
  workspaceId             Int
  workspace               Workspace                         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  members                 TeamMember[]
  permissions             Permission[]
  
  issueAssignments        IssueTeamAssignment[]
  checklistAssignments    ChecklistAssignmentTeamAssignment[]

  @@unique([workspaceId, name])
  @@index([workspaceId])
}

// ========== مدل‌های واسط (Join Tables) ==========

model WorkspaceMember {
  id          Int           @id @default(autoincrement())
  role        WorkspaceRole @default(MEMBER)
  joinedAt    DateTime      @default(now())
  workspaceId Int
  userId      String        @db.VarChar(255)
  
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  permissions Permission[]

  @@unique([workspaceId, userId])
  @@index([userId])
  @@index([workspaceId])
}

model TeamMember {
  id       Int      @id @default(autoincrement())
  joinedAt DateTime @default(now())
  teamId   Int
  userId   String   @db.VarChar(255)
  
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([userId])
  @@index([teamId])
}

model Permission {
  id                  Int                @id @default(autoincrement())
  level               PermissionLevel
  workspaceMemberId   Int?
  teamId              Int?
  
  workspaceMember     WorkspaceMember?   @relation(fields: [workspaceMemberId], references: [id], onDelete: Cascade)
  team                Team?              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  checklistTemplateId Int?
  checklistTemplate   ChecklistTemplate? @relation(fields: [checklistTemplateId], references: [id], onDelete: Cascade)
  
  projectId           Int?
  project             Project?           @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([workspaceMemberId])
  @@index([teamId])
  @@index([checklistTemplateId])
  @@index([projectId])
}

// === مدل‌های طبقه‌بندی (بدون تغییر از اسکیمای شما) ===
model Category {
  id        Int                            @id @default(autoincrement())
  name      String                         @unique @db.VarChar(100)
  parentId  Int?
  parent    Category?                      @relation("ParentChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Category[]                     @relation("ParentChild")
  templates CategoryOnChecklistTemplates[]
  @@index([name])
  @@index([parentId])
}

model Tag {
  id        Int                       @id @default(autoincrement())
  name      String                    @unique @db.VarChar(50)
  color     String                    @default("gray") @db.VarChar(20)
  templates TagOnChecklistTemplates[]
  @@index([name])
}

model CategoryOnChecklistTemplates {
  checklistTemplateId Int
  categoryId          Int
  assignedAt          DateTime @default(now())
  checklistTemplate   ChecklistTemplate @relation(fields: [checklistTemplateId], references: [id], onDelete: Cascade)
  category            Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  @@id([checklistTemplateId, categoryId])
  @@index([checklistTemplateId])
  @@index([categoryId])
}

model TagOnChecklistTemplates {
  checklistTemplateId Int
  tagId               Int
  assignedAt          DateTime @default(now())
  checklistTemplate   ChecklistTemplate @relation(fields: [checklistTemplateId], references: [id], onDelete: Cascade)
  tag                 Tag               @relation(fields: [tagId], references: [id], onDelete: Cascade)
  @@id([checklistTemplateId, tagId])
  @@index([checklistTemplateId])
  @@index([tagId])
}

// ========== مدل‌های موجود شما (به‌روز شده با منطق ورک‌اسپیس و تخصیص چندگانه) ==========

model ChecklistTemplate {
  id              Int                            @id @default(autoincrement())
  title           String                         @db.VarChar(255)
  description     String                         @db.Text
  isActive        Boolean                        @default(true)
  createdAt       DateTime                       @default(now())
  updatedAt       DateTime                       @updatedAt
  
  workspaceId     Int
  workspace       Workspace                      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  createdByUserId String?                        @db.VarChar(255)
  createdByUser   User?                          @relation("CreatedTemplates", fields: [createdByUserId], references: [id], onDelete: SetNull)
  
  items           ChecklistItem[]
  assignments     ChecklistAssignment[]
  permissions     Permission[]
  categories      CategoryOnChecklistTemplates[]
  tags            TagOnChecklistTemplates[]

  @@index([isActive])
  @@index([createdByUserId])
  @@index([workspaceId])
}

model ChecklistItem {
  id          Int               @id @default(autoincrement())
  templateId  Int
  template    ChecklistTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  title       String            @db.VarChar(255)
  description String            @db.Text
  order       Int
  responses   ChecklistResponse[]
  @@index([templateId])
  @@index([templateId, order])
}

model ChecklistAssignment {
  id            Int                               @id @default(autoincrement())
  templateId    Int
  template      ChecklistTemplate                 @relation(fields: [templateId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  
  responses     ChecklistResponse[]
  assignedAt    DateTime                          @default(now())
  dueDate       DateTime?

  // اصلاح: جایگزینی تخصیص مستقیم با تخصیص چندگانه
  assignedUsers ChecklistAssignmentAssignee[]
  assignedTeams ChecklistAssignmentTeamAssignment[]

  @@index([templateId])
}

model ChecklistResponse {
  id           Int                 @id @default(autoincrement())
  assignmentId Int
  assignment   ChecklistAssignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  itemId       Int
  item         ChecklistItem       @relation(fields: [itemId], references: [id], onDelete: Cascade)
  status       ResponseStatus      @default(NONE)
  issues       Issue[]             @relation("ResponseIssues")
  respondedAt  DateTime            @default(now()) @updatedAt

  @@index([assignmentId])
  @@index([itemId])
}

model Issue {
  id          Int                   @id @default(autoincrement())
  title       String                @db.VarChar(255)
  description String                @db.Text
  status      Status                @default(OPEN)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  
  workspaceId     Int
  workspace       Workspace             @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdByUserId String?               @db.VarChar(255)
  createdByUser   User?                 @relation("CreatedIssues", fields: [createdByUserId], references: [id], onDelete: SetNull)
  
  responses       ChecklistResponse[]   @relation("ResponseIssues")

  // اصلاح: جایگزینی تخصیص مستقیم با تخصیص چندگانه
  assignedUsers   IssueAssignee[]
  assignedTeams   IssueTeamAssignment[]

  @@index([workspaceId])
  @@index([createdByUserId])
}

// ========== مدل‌های جدید برای تخصیص چندگانه ==========

model IssueAssignee {
  issueId Int
  userId  String @db.VarChar(255)
  issue   Issue  @relation(fields: [issueId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([issueId, userId])
  @@index([userId])
}

model IssueTeamAssignment {
  issueId Int
  teamId  Int
  issue   Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
  team    Team  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  @@id([issueId, teamId])
  @@index([teamId])
}

model ChecklistAssignmentAssignee {
  assignmentId Int
  userId       String              @db.VarChar(255)
  assignment   ChecklistAssignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([assignmentId, userId])
  @@index([userId])
}

model ChecklistAssignmentTeamAssignment {
  assignmentId Int
  teamId       Int
  assignment   ChecklistAssignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  team         Team                @relation(fields: [teamId], references: [id], onDelete: Cascade)
  @@id([assignmentId, teamId])
  @@index([teamId])
}

// ========== مدل‌های ماژول مدیریت پروژه (برای آینده) ==========

model Project {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  permissions Permission[]
  tasks       Task[]
  @@index([workspaceId])
}

model Task {
  id        Int     @id @default(autoincrement())
  title     String
  projectId Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// ========== مدل‌های احراز هویت (بدون تغییر) ==========
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}
