// ===============================================
// Prisma Schema - نسخه نهایی و کامل
// آخرین به‌روزرسانی: بر اساس درخواست‌های کامل کاربر
// ===============================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// === مدل اصلی: الگوی چک‌لیست ===
model ChecklistTemplate {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String   @db.Text
  isActive    Boolean  @default(true) // برای قابلیت آرشیو کردن
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // اصلاح: ارتباط با کاربر ایجادکننده اختیاری شد تا migration روی داده‌های موجود با موفقیت اجرا شود
  createdByUserId String? @db.VarChar(255)
  createdByUser   User?   @relation("CreatedTemplates", fields: [createdByUserId], references: [id])

  // ارتباطات با سایر مدل‌ها
  items       ChecklistItem[]
  assignments ChecklistAssignment[]

  // ارتباط با جدول‌های واسط برای روابط چندبه‌چند
  categories CategoryOnChecklistTemplates[]
  tags       TagOnChecklistTemplates[]

  @@index([isActive])
  @@index([createdByUserId])
}

// === مدل‌های طبقه‌بندی ===

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(100)

  // فیلدهای لازم برای ساختار درختی
  parentId Int?
  parent   Category?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Category[] @relation("ParentChild")

  // ارتباط با جدول واسط
  templates CategoryOnChecklistTemplates[]

  @@index([name])
  @@index([parentId])
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(50)
  color String @default("gray") @db.VarChar(20) // فیلد برای رنگ برچسب

  // ارتباط با جدول واسط
  templates TagOnChecklistTemplates[]

  @@index([name])
}

// === جدول‌های واسط (Join Tables) برای روابط چندبه‌چند صریح ===

model CategoryOnChecklistTemplates {
  checklistTemplateId Int
  categoryId          Int
  assignedAt          DateTime @default(now())

  checklistTemplate ChecklistTemplate @relation(fields: [checklistTemplateId], references: [id], onDelete: Cascade)
  category          Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([checklistTemplateId, categoryId])
  // اصلاح: اضافه کردن ایندکس‌های لازم برای بهبود عملکرد
  @@index([checklistTemplateId])
  @@index([categoryId])
}

model TagOnChecklistTemplates {
  checklistTemplateId Int
  tagId               Int
  assignedAt          DateTime @default(now())

  checklistTemplate ChecklistTemplate @relation(fields: [checklistTemplateId], references: [id], onDelete: Cascade)
  tag               Tag               @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([checklistTemplateId, tagId])
  // اصلاح: اضافه کردن ایندکس‌های لازم برای بهبود عملکرد
  @@index([checklistTemplateId])
  @@index([tagId])
}

// === مدل‌های وابسته به چک‌لیست ===

model ChecklistItem {
  id          Int                 @id @default(autoincrement())
  templateId  Int
  template    ChecklistTemplate   @relation(fields: [templateId], references: [id], onDelete: Cascade)
  title       String              @db.VarChar(255)
  description String              @db.Text
  order       Int
  responses   ChecklistResponse[]

  @@index([templateId])
  @@index([templateId, order])
}

model ChecklistAssignment {
  id               Int                 @id @default(autoincrement())
  templateId       Int
  template         ChecklistTemplate   @relation(fields: [templateId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  assignedToUserId String              @db.VarChar(255)
  assignedToUser   User                @relation(fields: [assignedToUserId], references: [id])
  responses        ChecklistResponse[]
  assignedAt       DateTime            @default(now())
  dueDate          DateTime?

  @@index([templateId])
  @@index([assignedToUserId])
}

model ChecklistResponse {
  id           Int                 @id @default(autoincrement())
  assignmentId Int
  assignment   ChecklistAssignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  itemId       Int
  item         ChecklistItem       @relation(fields: [itemId], references: [id], onDelete: Cascade)
  status       ResponseStatus      @default(NONE)
  issues       Issue[]             @relation("ResponseIssues")
  respondedAt  DateTime            @default(now()) @updatedAt

  @@index([assignmentId])
  @@index([itemId])
}

model Issue {
  id               Int                 @id @default(autoincrement())
  title            String              @db.VarChar(255)
  description      String              @db.Text
  status           Status              @default(OPEN)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  assignedToUserId String?             @db.VarChar(255)
  assignedToUser   User?               @relation(fields: [assignedToUserId], references: [id])
  responses        ChecklistResponse[] @relation("ResponseIssues")

  @@index([assignedToUserId])
}

// === مدل‌های مربوط به کاربران و احراز هویت ===

model User {
  id                   String                @id @default(cuid())
  name                 String?
  email                String?               @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  assignedIssues       Issue[]
  checklistAssignments ChecklistAssignment[]
  createdTemplates     ChecklistTemplate[]   @relation("CreatedTemplates")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// === Enum ها ===

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum ResponseStatus {
  NONE
  ACCEPTABLE
  UNACCEPTABLE
}
